#!/bin/bash

# Created by argbash-init v2.7.1
# ARG_OPTIONAL_SINGLE([cors-origin],[c],[CORS accepted origins; comma separated value])
# ARG_OPTIONAL_SINGLE([enc-key],[e],[Key for refresh token encryption])
# ARG_OPTIONAL_SINGLE([key],[k],[Private key for access token signing])
# ARG_OPTIONAL_SINGLE([pub-key],[K],[Public key for access token verification])
# ARG_OPTIONAL_SINGLE([access-exp],[a],[Access Token expiration time in seconds],[86400])
# ARG_OPTIONAL_SINGLE([refresh-exp],[r],[Refresh Token expiration time in seconds],[259200])
# ARG_OPTIONAL_SINGLE([issuer],[i],[Tokens' issuer])
# ARG_OPTIONAL_SINGLE([port],[p],[Server port],[3001])
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='cekKariph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cors_origin=
_arg_enc_key=
_arg_key=
_arg_pub_key=
_arg_access_exp="900"
_arg_refresh_exp="259200"
_arg_issuer=
_arg_port="3001"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [-c|--cors-origin <arg>] [-e|--enc-key <arg>] [-k|--key <arg>] [-K|--pub-key <arg>] [-a|--access-exp <arg>] [-r|--refresh-exp <arg>] [-i|--issuer <arg>] [-p|--port <arg>] [-h|--help]\n' "$0"
 	printf '\t%s\n' "-c, --cors-origin: CORS accepted origins; comma separated value (no default)"
#	printf '\t%s\n' "-e, --enc-key: Key for refresh token encryption (no default)"
#	printf '\t%s\n' "-k, --key: Private key for access token signing (no default)"
#	printf '\t%s\n' "-K, --pub-key: Public key for access token verification (no default)"
	printf '\t%s\n' "-a, --access-exp: Access Token expiration time in seconds (default: '900' [15m])"
	printf '\t%s\n' "-r, --refresh-exp: Refresh Token expiration time in seconds (default: '259200' [3d])"
	printf '\t%s\n' "-i, --issuer: Tokens' issuer (no default)"
	printf '\t%s\n' "-p, --port: Server port (default: '3001')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-c|--cors-origin)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_cors_origin="$2"
				shift
				;;
			--cors-origin=*)
				_arg_cors_origin="${_key##--cors-origin=}"
				;;
			-c*)
				_arg_cors_origin="${_key##-c}"
				;;
#			-e|--enc-key)
#				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
#				_arg_enc_key="$2"
#				shift
#				;;
#			--enc-key=*)
#				_arg_enc_key="${_key##--enc-key=}"
#				;;
#			-e*)
#				_arg_enc_key="${_key##-e}"
#				;;
#			-k|--key)
#				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
#				_arg_key="$2"
#				shift
#				;;
#			--key=*)
#				_arg_key="${_key##--key=}"
#				;;
#			-k*)
#				_arg_key="${_key##-k}"
#				;;
#			-K|--pub-key)
#				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
#				_arg_pub_key="$2"
#				shift
#				;;
#			--pub-key=*)
#				_arg_pub_key="${_key##--pub-key=}"
#				;;
#			-K*)
#				_arg_pub_key="${_key##-K}"
#				;;
			-a|--access-exp)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_access_exp="$2"
				shift
				;;
			--access-exp=*)
				_arg_access_exp="${_key##--access-exp=}"
				;;
			-a*)
				_arg_access_exp="${_key##-a}"
				;;
			-r|--refresh-exp)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_refresh_exp="$2"
				shift
				;;
			--refresh-exp=*)
				_arg_refresh_exp="${_key##--refresh-exp=}"
				;;
			-r*)
				_arg_refresh_exp="${_key##-r}"
				;;
			-i|--issuer)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_issuer="$2"
				shift
				;;
			--issuer=*)
				_arg_issuer="${_key##--issuer=}"
				;;
			-i*)
				_arg_issuer="${_key##-i}"
				;;
			-p|--port)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_port="$2"
				shift
				;;
			--port=*)
				_arg_port="${_key##--port=}"
				;;
			-p*)
				_arg_port="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


printf 'Value of --%s: %s\n' 'cors-origin' "$_arg_cors_origin"
#printf 'Value of --%s: %s\n' 'enc-key' "$_arg_enc_key"
#printf 'Value of --%s: %s\n' 'priv-key' "$_arg_priv_key"
#printf 'Value of --%s: %s\n' 'pub-key' "$_arg_pub_key"
printf 'Value of --%s: %s\n' 'access-exp' "$_arg_access_exp"
printf 'Value of --%s: %s\n' 'refresh-exp' "$_arg_refresh_exp"
printf 'Value of --%s: %s\n' 'issuer' "$_arg_issuer"
printf 'Value of --%s: %s\n' 'port' "$_arg_port"

# ] <-- needed because of Argbash


### SCRIPT BEGIN

# get script dir
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"

# logs dir
mkdir -p logs

# generate keys
$DEV/keygen.sh

# set enviroments variables
cp $DEV/.env.template .env

SECRET=`echo -n password | sha256sum | awk '{print toupper($1)}'`
sed -i 's:$ENCRYPTION_KEY:'${SECRET:0:32}':' .env
sed -i 's:$PRIVATE_KEY:\.keys/jwtRS256\.key:' .env
sed -i 's:$PUBLIC_KEY:\.keys/jwtRS256\.key\.pub:' .env
sed -i 's:$CORS_ORIGIN:'$_arg_cors_origin':' .env
sed -i 's:$ACCESS_TOKEN_EXP:'$_arg_access_exp':' .env
sed -i 's:$REFRESH_TOKEN_EXP:'$_arg_refresh_exp':' .env
sed -i 's:$ISSUER:'$_arg_issuer':' .env
sed -i 's:$PORT:'$_arg_port':' .env
sed -i 's:$LOG_PATH:logs:' .env
